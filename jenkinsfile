pipeline{
    agent any
    environment{
        VERSION = "${env.BUILD_ID}"
    }
    stages{
        stage("Sonar quality check"){
            agent {
                docker {
                    image 'openjdk:11'
                    }
                }
                steps{
                     script{
                        withSonarQubeEnv(credentialsId: 'sonar-token') {
                            sh 'chmod +x gradlew'
                            sh './gradlew sonarqube'
   
                        }
                        
                        timeout(time: 1, unit: 'HOURS') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            }

                        }
                
                
                    }
                }
            }

        stage("Identify misconfiguration using datree in helm charts"){
           steps{
               script{
                   dir('kubernetes/') {
                       withEnv(['DATREE_TOKEN=UkD67Vh2SpHt5dzcroknzW']) {
                        }
                       sh 'helm datree test myapp/'
                   }
                   
               }
           }
       }    
        

        stage("Docker build and push to ECR"){
            steps{
                script{
                    sh '''
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 011006889812.dkr.ecr.us-east-1.amazonaws.com
                    docker build -t docker-repository:${VERSION} .
                    docker tag docker-repository:${VERSION} 011006889812.dkr.ecr.us-east-1.amazonaws.com/docker-repository:${VERSION}
                    docker push 011006889812.dkr.ecr.us-east-1.amazonaws.com/docker-repository:${VERSION}
                    docker rmi 011006889812.dkr.ecr.us-east-1.amazonaws.com/docker-repository:${VERSION}

                    '''
                }
            }
       }
       stage("Push helm chart in ECR reposiroty"){
            steps{
                script{
                    dir('kubernetes/'){ 
                        withEnv(['HELM_EXPERIMENTAL_OCI=1']){
                                
                        sh '''
                            helmversion=$( helm show chart myapp | grep version | cut -d: -f 2 | tr -d ' ')
                            tar -czvf  myapp-${helmversion}.tgz myapp/
                            aws ecr get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin 011006889812.dkr.ecr.us-east-1.amazonaws.com
                            helm push myapp-${helmversion}.tgz oci://011006889812.dkr.ecr.us-east-1.amazonaws.com/
                            aws ecr describe-images --repository-name myapp --region us-east-1

                        '''
                         }
                    } 
                }
            }
       }
        stage('Manually Approve '){
            steps{
                script{
                    timeout(3){
                        mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> Go to build url and approve the deployment request <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "avijit.dharaws2021@gmail.com";
                        input(id: "Deploy Gate", message: "Deploy ${params.project_name}?", ok: 'Deploy')
                    }
                }
            }
        }
        stage('Kubernet deployment') {
            steps{
                script{
                    withCredentials([kubeconfigFile(credentialsId: 'kubernet-config', variable: 'KUBECONFIG')]) {
                        dir ("kubernetes/"){
                            sh 'helm list'
                            sh 'helm upgrade --install --set image.repository="011006889812.dkr.ecr.us-east-1.amazonaws.com/docker-repository" --set image.tag="${VERSION}" myjavaapp myapp/ '
                        }
                        

                    }
                }
            }
        }
        stage('Validate application '){
            steps{
                script{
                    withCredentials([kubeconfigFile(credentialsId: 'kubernet-config', variable: 'KUBECONFIG')]) {
                    sh 'kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- curl myjavaapp-myapp:8080'
                    }
                }
            }
        }
    }
    

      

    
    post {
		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "avijit.dharaws2021@gmail.com";  
		    }
	    }

}    
  
